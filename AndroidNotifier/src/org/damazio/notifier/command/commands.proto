/*
 * Copyright 2010 Rodrigo Damazio <rodrigo@damazio.org>
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package AndroidNotifier;

// TODO: Merge with proto in MultiDroidNotifier

option java_package = "org.damazio.notifier.command";
option java_outer_classname = "CommandProtocol";
option optimize_for = LITE_RUNTIME;

message Contact {
  enum Type {
    HOME = 0;
    MOBILE = 1;
    WORK = 2;
    OTHER = 3;
  }

  required string name = 1;
  required string number = 2;
  required Type type = 3;
  optional string other_type = 4;
  // TODO: Figure this one out
  // optional bytes picture = 5;
}

message CommandRequest {
  required fixed64 device_id = 1;
  required fixed64 command_id = 2;

  enum CommandType {
    CALL = 1;
    ANSWER = 2;
    HANG_UP = 3;
    SEND_SMS = 4;
    SEND_MMS = 5;
    QUERY = 6;
  }
  required CommandType command_type = 3;

  // --------------------
  // Type-specific fields
  // --------------------

  message CallOptions {
    required string phone_number = 1;
  };

  message SmsOptions {
    required string phone_number = 1;
    required string sms_message = 2;
  };

  message QueryOptions {
    required string query = 1;
  };

  optional CallOptions call_options = 10;
  optional SmsOptions sms_options = 11;
  optional QueryOptions query_options = 12;
}

message CommandResponse {
  // Id of the device responding
  required fixed64 device_id = 1;

  // Id of the command being responded to
  required fixed64 command_id = 2;

  optional bool success = 3 [default = false];
  optional string errorMessage = 4;

  // --------------------
  // Type-specific fields
  // --------------------

  message SearchResults {
    repeated Contact contacts = 1;
  }
  optional SearchResults search_results = 10;
}

message CommandDiscoveryRequest {
  required fixed64 device_id = 1;
}

message CommandDiscoveryReply {
  required fixed64 device_id = 1;

  // 12 bytes (the bluetooth mac address)
  optional bytes bluetooth_mac = 2;

  // Zero or more IPv4 addresses for the device
  repeated bytes ip_address = 3;
}
